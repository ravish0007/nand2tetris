/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //// Replace this comment with your code.
    Not16(in=x , out=xnot );
    And16(a=x , b=xnot , out=xzero );

    Not16(in=y, out=ynot);
    And16(a=y , b=ynot , out=yzero );

    Mux16(a=x , b=xzero , sel=zx , out=zxout);
    Mux16(a=y , b=yzero , sel=zy , out=zyout );

    //-----------------------------------------------------

    Not16(in=zxout , out=negxout );

    Not16(in=zyout , out=negyout );

    Mux16(a=zxout , b=negxout , sel=nx , out=nxout);
    Mux16(a=zyout , b=negyout , sel=ny , out=nyout);


    //---------------------------------------------------------------------------------------------------------------------------------------

     Add16(a = nxout, b = nyout, out = sum );
     And16(a=nxout , b=nyout , out=andout );


     Mux16(a=andout , b=sum , sel=f , out=fout );

     //-------------------------------------
     Not16(in=fout , out=notfout );

     Mux16(a=fout, b=notfout , sel=no , out=finaloutput,  out[15]=ng, out[0..7]=z1out, out[8..15]=z2out );
    
    
      Or8Way(in=z1out , out=zz );
       Or8Way(in=z2out , out=yy );
       Or(a=zz , b=yy , out=zrr );
       Not(in=zrr , out=zr );


     And16(a=finaloutput , b=finaloutput, out=out);
 

}
